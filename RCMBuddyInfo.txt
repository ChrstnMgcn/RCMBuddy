Excel Buddy Project Setup Summary (Comprehensive)
This document provides a complete overview of the "Excel Buddy" web application's current state, architecture, file structure, key code components, database setup, and deployment steps using Netlify, GitHub, and Neon (PostgreSQL). It also includes a summary of issues encountered and their resolutions.

1. Project Goal
To provide a web application named "Excel Buddy" focused on Excel file manipulation, data validation, and process automation. Key features include:

User Management: Secure user registration and login.

Multi-Company Support: Allows multiple companies to use the application, with strict data isolation ensuring each company can only access its own data. Multiple users can belong to the same company.

File Management: Users can securely upload, store, list, download, and delete files (like Excel data dictionaries and other documents) directly within the Neon (PostgreSQL) database.

Data Validation Tool: An interactive client-side tool to analyze Excel/CSV files for data quality issues, including integration with uploaded data dictionaries for custom validation rules.

Clean Data Tool: A client-side tool for basic Excel data cleaning (duplicates, trimming, case standardization).

Deployment: Automated deployment via Netlify, leveraging Netlify Functions for backend logic.

Version Control: GitHub.

2. Core Technologies Used
Frontend: HTML, CSS (Tailwind CSS for styling), JavaScript

Backend: Node.js (running as Netlify Functions)

Database: Neon (PostgreSQL) for user data, company data, and binary file data.

Deployment Platform: Netlify

Version Control: GitHub

Authentication: JSON Web Tokens (JWT) for secure, stateless user sessions.

Password Hashing: bcryptjs.

File Upload Parsing: busboy (Node.js library for multipart/form-data).

Excel Processing (Client-side): xlsx.full.min.js (for Validation Engine analysis and report generation).

Excel Processing (Backend): exceljs (for Data Cleaner processing).

3. Current Project File Structure
rcm-buddy-app/ (or excel-buddy-app/)
├── public/                                 <-- Static frontend files
│   ├── index.html                          <-- Login/Registration page
│   ├── dashboard.html                      <-- User dashboard
│   ├── tools.html                          <-- List of all tools
│   ├── file-manager.html                   <-- File upload and listing page
│   └── tools/                              <-- Sub-directory for individual tool pages
│       ├── data-cleaner.html               <-- Data Cleaner UI
│       ├── validation-engine.html          <-- Validation Engine UI (HTML only)
│       ├── validation-engine.css           <-- Validation Engine custom CSS
│       └── validation-engine.js            <-- Validation Engine client-side logic
├── netlify/                                <-- Netlify Functions directory
│   └── functions/
│       ├── package.json                    <-- Function dependencies
│       ├── register.js                     <-- User/Company registration logic
│       ├── login.js                        <-- User login logic
│       ├── protected.js                    <-- JWT verification for protected routes
│       ├── upload-file.js                  <-- Handles file upload to Neon DB
│       ├── list-files.js                   <-- Lists files from Neon DB (company-isolated)
│       ├── get-file.js                     <-- Retrieves file data from Neon DB (company-isolated)
│       └── delete-file.js                  <-- Deletes file from Neon DB (company-isolated)
│       └── clean-excel.js                  <-- Backend for Data Cleaner tool
├── netlify.toml                            <-- Netlify build configuration
└── .gitignore                              <-- Git ignore rules

4. Database Schema
The application uses a PostgreSQL database (Neon) with the following tables:

companies table: Stores information about each client company.

CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

users table: Stores user credentials and links to their company.

-- Assuming existing users table, alter to add company_id
ALTER TABLE users
ADD COLUMN company_id INTEGER REFERENCES companies(id) ON DELETE RESTRICT;

-- Optional: If you want to enforce that every user MUST belong to a company
-- ALTER TABLE users
-- ALTER COLUMN company_id SET NOT NULL;

company_files table: Stores metadata and the binary data of uploaded files, with strict company and user ownership.

CREATE TABLE company_files (
    id SERIAL PRIMARY KEY,
    company_id INTEGER NOT NULL REFERENCES companies(id) ON DELETE CASCADE, -- CRUCIAL for data isolation
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    original_filename VARCHAR(255) NOT NULL,
    mimetype VARCHAR(100),
    size_bytes BIGINT,
    file_data BYTEA NOT NULL, -- Stores the actual file content as binary data (suitable for smaller files)
    is_data_dictionary BOOLEAN DEFAULT FALSE, -- NEW: Flag to identify data dictionary files
    uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

5. Key Code Components & Their Roles
5.1. netlify.toml
The primary configuration for Netlify deployment. It defines build directories, function paths, and API redirects.

[build]
  publish = "public"
  functions = "netlify/functions"

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[plugins]]
package = "@netlify/plugin-functions-install-core"

5.2. Frontend Pages (public/ and public/tools/)
index.html:

Registration: Form collects company_name, username, email, password. Sends data to /api/register.

Login: Form accepts username or email as identifier, plus password. Sends data to /api/login.

Stores jwtToken in localStorage on successful login.

dashboard.html:

Authenticates via JWT.

Displays logged-in user's username, email, and company_name (fetched from /api/protected).

Provides links to tools.html.

tools.html:

Lists all available tools (File Manager, Data Cleaner, Validation Engine, etc.).

Tools can be hidden using data-status="development" attribute on their div elements combined with a CSS rule.

file-manager.html:

File Upload: Form for selecting a file and a checkbox to Mark as Data Dictionary. Sends FormData to /api/upload-file.

File Listing: Fetches file metadata from /api/list-files and displays it.

File Download: Calls /api/get-file to retrieve and download binary file data.

File Delete: Calls /api/delete-file to delete file metadata and binary data from Neon.

Includes defensive parsing in renderFiles to handle original_filename potentially stored as a JSON string from earlier versions.

tools/data-cleaner.html:

UI for uploading Excel files and applying cleaning options.

Calls clean-excel.js backend function for processing and download.

tools/validation-engine.html:

Client-side Validation: Uses xlsx.full.min.js to perform all Excel file analysis, rule application, and report generation directly in the browser.

Data Dictionary Selection: Loads dropdown with files marked is_data_dictionary from /api/list-files. Allows user to select and load a dictionary.

Dynamic Rules: When a data dictionary is loaded, its "Validation Rules" sheet is parsed to define validation rules (e.g., REQUIRED, DATE_PAST, ALLOWED_VALUES, NUMERIC_RANGE, REGEX, UNIQUE).

Rule Application: The analyzeFile function now applies these parsed data dictionary rules to the uploaded main Excel file.

Downloadable Report: Generates and exports a summary report as an Excel file.

Separated into validation-engine.html, validation-engine.css, and validation-engine.js for better organization.

5.3. Backend Functions (netlify/functions/)
package.json: Lists Node.js dependencies: bcryptjs, jsonwebtoken, pg, busboy, exceljs. (@google-cloud/storage was removed).

register.js:

Accepts company_name.

Transactions: Checks if company exists, creates if new, then inserts user with company_id.

login.js:

Accepts identifier (username or email). Queries DB for match.

Generates JWT including user.id, username, email, company_id, company_name.

protected.js:

Verifies JWT.

Returns decoded JWT payload (including company_id, company_name) to frontend.

upload-file.js:

Handles file upload directly to company_files table in Neon.

Authenticates via JWT to get user_id and company_id.

Stores company_id, user_id, original_filename, mimetype, size_bytes, and file_data (BYTEA) in Neon.

list-files.js:

Authenticates via JWT to get company_id.

Queries company_files table WHERE company_id = $1 to list files only for that company.

Returns id, original_filename, mimetype, size_bytes, uploaded_at, user_id, and is_data_dictionary.

get-file.js:

Authenticates via JWT to get company_id.

Retrieves file_data (binary) and metadata from company_files table WHERE id = $1 AND company_id = $2.

Returns file data as base64 in a JSON response for frontend download.

delete-file.js:

Authenticates via JWT to get company_id.

Deletes file record from company_files table WHERE id = $1 AND company_id = $2.

5.4. Data Isolation Strategy (CRUCIAL)
Company ID in JWT: company_id is embedded in the JWT upon successful login.

Backend Enforcement: All backend functions that interact with company-specific data (upload-file.js, list-files.js, get-file.js, delete-file.js, clean-excel.js if it were to log to DB) MUST:

Verify the JWT.

Extract the company_id from the decoded JWT.

Include a WHERE company_id = <extracted_company_id> clause in ALL database queries (SELECT, INSERT, UPDATE, DELETE) to ensure strict data isolation.

6. Netlify Deployment & Configuration
Environment Variables:

DATABASE_URL: Your Neon PostgreSQL connection string.

JWT_SECRET: Your strong, random secret key.

These must be set in Netlify Site Settings > Build & Deploy > Environment Variables, with "Functions" scope enabled.

GCS-related variables (GCS_PROJECT_ID, etc.) are no longer needed.

Continuous Deployment: Netlify automatically deploys changes pushed to the configured GitHub branch.

Function Bundling: The @netlify/plugin-functions-install-core plugin handles Node.js dependency installation for functions.

7. Common Issues & Troubleshooting
"Network or authentication error: Unexpected token '<', "<!DOCTYPE "... is not valid JSON": Frontend expecting JSON but received HTML. Usually means backend function was not found or failed to execute.

Verify netlify.toml functions path.

Check netlify/functions/ for correct file names (upload-file.js, list-files.js, etc.) and content (pure JS, no HTML).

Check Netlify deploy logs (under "Functions" section) for build or runtime errors specific to the function.

Functions not showing in Netlify deploy logs: Incorrect folder paths in netlify.toml or missing plugin.

Login fails (username/email): Ensure login.js correctly queries both email and username.

Old filename formatting (JSON string): Old entries in company_files may have this. file-manager.html includes defensive parsing to display them correctly. New uploads should be fine.

File upload/download/delete not working: Check specific function logs (upload-file.js, list-files.js, get-file.js, delete-file.js) for runtime errors. Verify authentication token is sent correctly from frontend.

This document should provide a complete and up-to-date reference for your Excel Buddy project.
