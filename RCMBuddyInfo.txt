RCM Buddy Project Setup Summary
This document provides a comprehensive overview of the "RCM Buddy" web application, including its architecture, file structure, key code components, and deployment steps using Netlify, GitHub, and Neon (PostgreSQL). It also summarizes common issues and their solutions encountered during the setup.

1. Project Goal
To create a web application named "RCM Buddy" with:

User registration and login functionality.

A protected dashboard accessible only to authenticated users.

Data storage in a PostgreSQL database (Neon).

Deployment via Netlify using Netlify Functions as the backend.

Version control with GitHub.

Core Focus: Providing tools and solutions for Excel file manipulation, data validation, and process automation.

Multi-Company Support: Allow multiple companies to use the application with their data isolated from other companies. Multiple users can belong to the same company.

2. Core Technologies Used
Frontend: HTML, CSS (Tailwind CSS for styling), JavaScript

Backend: Node.js (via Netlify Functions)

Database: Neon (PostgreSQL)

Deployment Platform: Netlify

Version Control: GitHub

Authentication Mechanism: JSON Web Tokens (JWT) for stateless session management

Password Hashing: bcryptjs

Excel Processing (Client-side): xlsx.full.min.js (for Validation Engine)

Excel Processing (Backend - for Data Cleaner): exceljs, busboy

3. Project File Structure
The project follows a specific directory structure optimized for Netlify deployments:

rcm-buddy-app/
├── public/                     <-- Contains all static frontend assets (HTML, client-side JS)
│   ├── index.html              <-- Main page for login/registration forms (includes Company Name for registration)
│   ├── dashboard.html          <-- Protected page for authenticated users (displays company name)
│   ├── tools.html              <-- Page listing all available Excel tools (can hide 'development' tools)
│   └── tools/                  <-- New sub-directory for individual tool pages
│       ├── data-cleaner.html   <-- Dedicated page for the Data Cleaner tool
│       └── validation-engine.html <-- Dedicated page for the Validation Engine tool (Client-side)
├── netlify/                    <-- Parent directory for Netlify-specific configurations
│   └── functions/              <-- Contains Node.js serverless functions
│       ├── package.json        <-- Lists Node.js dependencies for the functions
│       ├── register.js         <-- Handles user registration logic (now handles Company creation/assignment)
│       ├── login.js            <-- Handles user login logic and JWT generation (now includes Company ID/Name in JWT, queries by username/email)
│       ├── protected.js        <-- Example function for a protected API endpoint (returns Company ID/Name)
│       └── clean-excel.js      <-- Backend function for Data Cleaner tool (authenticates by JWT, requires company_id)
├── tools/                      <-- New folder for various project tools (Non-web content, e.g., documentation)
│   └── tracker tool            <-- A file within the tools folder
├── netlify.toml                <-- Netlify build configuration and redirects
└── .gitignore                  <-- Specifies files/folders to ignore in Git

4. Key Code Components & Their Roles
4.1. netlify.toml
Located at the project root. Essential for Netlify to understand the project structure and routing.

[build]
  publish = "public"            # Specifies the frontend static assets directory
  functions = "netlify/functions" # Specifies the Netlify Functions directory

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat" # Routes all /api/ requests to Netlify Functions
  status = 200

# Required plugin to automatically install Node.js dependencies for Netlify Functions
[[plugins]]
package = "@netlify/plugin-functions-install-core"

4.2. Database Schema for Multi-Company Support
companies table:

CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

users table (updated):

ALTER TABLE users
ADD COLUMN company_id INTEGER REFERENCES companies(id) ON DELETE RESTRICT;

-- Optional: If you want to ensure a user always belongs to a company
-- (i.e., this column cannot be null), you can run this additional command:
-- ALTER TABLE users
-- ALTER COLUMN company_id SET NOT NULL;

Any future data stored (e.g., cleaned files, validation reports if persisted) should include a company_id to ensure data isolation.

4.3. Frontend (public/ directory)
index.html:

Updated registration form to include a "Company Name" input field.

Login form now accepts either "Username or Email" as an identifier.

JavaScript sends company_name during registration and identifier during login to backend functions.

dashboard.html:

Updated to display the authenticated user's company_name retrieved from the protected.js function's JWT payload.

Displays general Excel tool insights.

tools.html:

Lists all available Excel tools.

Uses data-status="development" and CSS to hide tools not yet ready.

tools/data-cleaner.html:

Dedicated page for the Data Cleaner tool.

Backend processing (clean-excel.js) handles file cleaning and download.

tools/validation-engine.html:

Performs Excel validation entirely client-side using xlsx.full.min.js.

Provides interactive analysis and a downloadable report.

Navigation links streamlined to match main site structure.

"Show Values" button functionality fixed via event delegation.

4.4. Backend (netlify/functions/ directory)
package.json:

Lists necessary Node.js modules for all functions: pg, bcryptjs, jsonwebtoken, busboy, exceljs.

register.js:

Updated: Accepts company_name. Checks if company exists; if not, creates a new companies entry. Associates the new user with company_id.

login.js:

Updated: Accepts identifier (username or email). Queries users table by both username and email. Includes company_id and company_name in the generated JWT payload.

protected.js:

Updated: Decodes company_id and company_name from the JWT and returns them. This company_id is crucial for securing data access in other backend functions.

clean-excel.js:

Backend function for the Data Cleaner tool. Handles file upload, cleaning, and returning a base64-encoded cleaned file and summary.

Updated: Now authenticates requests by verifying the JWT and extracts company_id from it, making company_id available for data isolation in future database operations.

4.5. Data Isolation Strategy (Crucial)
The company_id is stored in the users table and included in the JWT upon login.

For any backend functions that save or retrieve data specific to a company (e.g., clean-excel.js if it were to log cleaning events, or future functions for saving reports), they MUST:

Extract the company_id from the decoded JWT.

Include a WHERE company_id = <extracted_company_id> clause in all database queries (SELECT, INSERT, UPDATE, DELETE) to ensure only data belonging to that company is accessed or modified.

5. Critical Setup & Configuration Steps
Neon Database Changes:

Run SQL to create the companies table.

Run SQL to alter the users table to add company_id.

Netlify Environment Variables:

DATABASE_URL: Your Neon connection string.

JWT_SECRET: Your strong, random secret key.

Ensure both have "Functions" scope checked.

6. Common Issues & Troubleshooting
"Network error. Please check your connection." (on frontend): Frontend fetch request failed to reach the Netlify Function. Check Netlify logs for register.js, login.js errors.

Functions not showing in Netlify deploy logs or failing to build: Incorrect path in netlify.toml (functions = "netlify/functions") or missing netlify/functions/package.json dependencies. Ensure netlify.toml has [[plugins]] package = "@netlify/plugin-functions-install-core".

SyntaxError: Unexpected token '<' in function logs: A .js function file contains HTML content. Verify file content on GitHub.

Login fails after "username or email" update: Ensure netlify/functions/login.js is updated to query by WHERE email = $1 OR username = $1.

"Show Values" button not working (on Validation Engine): Ensure the button's type is button and that the JavaScript event delegation for .toggle-values-btn is correctly targeting the button in public/tools/validation-engine.html. (This was addressed in previous steps).

7. Deployment Process
Local Setup: Apply all code changes (updated index.html, dashboard.html, login.js, register.js, protected.js, clean-excel.js, validation-engine.html, tools.html, and companies table SQL).

Consider removing netlify/functions/validate-excel.js as it is no longer used by the frontend for validation.

Git & GitHub: Commit all changes and push to your GitHub repository.

Netlify Sync: Netlify will automatically trigger a new deployment.

Monitor Deployment: Observe the "Deploys" tab in your Netlify dashboard until the site shows "Published."

Test Live Site: Verify registration (with company name), login (with username/email), and tool functionality (Data Cleaner and Validation Engine).

This updated document provides a comprehensive blueprint for your multi-company Excel Buddy application.

Final Next Step for you:

Commit and push these latest changes to your GitHub repository.

Once Netlify successfully deploys, your Excel Buddy application will fully support multi-company registration, login, and basic data isolation principles. Remember to continue applying the company_id isolation logic to any new backend functions that interact with company-specific data.
